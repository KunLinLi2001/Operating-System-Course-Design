特殊注意事项：
1.如果打开文件代码中文显示乱码，请打开同目录下"备份代码文件夹寻找同名的.txt文件复制粘贴进.cpp文件"
如果仍显示乱码，检查下编辑环境是否为UTF-8格式的编码
2.同理终端也检查下是否为UTF-8格式的编码
3.编译运行需要事先准备好g++
终端执行：sudo apt-get install g++
4.为了代码顺利执行，建议在编译前就做第一步操作去检查代码注释以及输出语句里的中文是否正常
5.终端路径一定是在test2文件夹下！！

任务一：利用信号量模拟“多生产者-多消费者”对同一缓冲区的访问
编译：g++ task1.cpp -o task1 -lpthread
运行：./task1
终端输出：显示三列内容
（1）第一列为计时，即从开始创建生产者之后代码运行的时间;
通过上下两行的时间差也可以去比较目前的生产者/消费者执行工作花费多少时间
（2）第二列为生产者的动态显示，生产者设置为3名，生产的产品为随机单词，缓冲区大小为10
基本格式为————生产者：[1/2/3] 生产一个产品：[某单词]，并将其放入缓冲区:[0~10] 位置
若缓冲区已满————缓冲区已满!生产者:[1/2/3] 等待中......
若目前有其他生产者/消费在工作————缓冲区有进程正在操作 !  生产者 :[1/2/3] 等待中......
（3）第三列为消费者的动态显示，消费者设置为3名，消费的产品为缓冲区中的单词，缓冲区大小为10
基本格式为————消费者：[1/2/3] 消费一个产品：[某单词]，将其从缓冲区取出:[0~10] 位置
若缓冲区已满————缓冲区已满!消费者:[1/2/3] 等待中......
若目前有其他生产者/消费在工作————缓冲区有进程正在操作 !  消费者 :[1/2/3] 等待中......
{注：任务一并没有设置循环停止，因此程序运行的终点是电脑缓存满，待运行一段时间后直接ctrl+z软中断即可}

任务二：
编译：g++ task2.cpp -o task2 -lpthread
运行：./task2 ./story.txt
终端输出：显示三列内容
（1）第一列为计时，即从开始创建生产者之后代码运行的时间;
通过上下两行的时间差也可以去比较目前的生产者/消费者执行工作花费多少时间
（2）第二列为生产者的动态显示，生产者设置为3名，生产的产品为随机单词，缓冲区大小为10
基本格式为————生产者：[1/2/3] 生产一个产品：[某单词]，并将其放入缓冲区:[0~10] 位置
若缓冲区已满————缓冲区已满!生产者:[1/2/3] 等待中......
若目前有其他生产者/消费在工作————缓冲区有进程正在操作 !  生产者 :[1/2/3] 等待中......
（3）第三列为消费者的动态显示，消费者设置为3名，消费的产品为缓冲区中的单词，缓冲区大小为10
基本格式为————消费者：[1/2/3] 消费一个产品：[某单词]，将其从缓冲区取出:[0~10] 位置
若缓冲区已满————缓冲区已满!消费者:[1/2/3] 等待中......
若目前有其他生产者/消费在工作————缓冲区有进程正在操作 !  消费者 :[1/2/3] 等待中......

经过快速运行后，统计的单词结果会在程序尾部输出，去除无用词的top20热词会在终端打印出来;
而包括无用词的所有词汇出现次数会在目录下的result.txt显示出来